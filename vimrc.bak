"" GENERAL SETTINGS
set nocompatible
set ttyfast "Speed up scrolling in Vim
syntax on                
set number
set history=1000
set showmode
set visualbell
set noerrorbells
set autoread
set gcr=a:blinkon0
set relativenumber      
set encoding=UTF-8
set nowrap
set linebreak
set autowrite   " Automatically save before commands like :next and :make
set scrolloff=8 
set showmatch    " Show matching brackets.
set hidden       " Hide buffers when they are abandoned
set matchpairs+=<:>  " Highlight matching pairs of brackets. '%' character to jump btw
set cursorline              " highlight current cursor horizontally&vertifcally
set cursorcolumn
highlight CursorLine ctermbg=Yellow cterm=bold guibg=#2b2b2b
set confirm    " Display a confirmation dialog when closing an unsaved file
set ruler    " Always show current position
set cmdheight=1    " Height of the command bar
"Search
set incsearch   
set ignorecase  
set smartcase   
set hlsearch
" Security
set modelines=0
set nomodeline
" Disable scrollbars
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L
"set shell      "shell used to execute cmds
"set re=0       "sets regex
" turn off swap files
set noswapfile
set nobackup
set nofoldenable
" Identation
set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab

filetype plugin on
filetype indent on

set background=dark
set termguicolors

set wildmenu
set wildmode=longest,list,full
set laststatus=2
if !has('gui_running')
      set t_Co=256
endif
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
set spell spelllang=en_us
let mapleader=" " "Maps Leader to space
"" FUNCTIONS
":w!! When open a file without write perms, call&auto sudo the file
ca w!! w !sudo tee >/dev/null "%"

" Turn persistent undo on>>undo even when close a buffer/VIM
try
    set undodir=~/.vim_runtime/temp_dirs/undodir
    set undofile
catch
endtry

"" MAPPING
let mapleader = "\<space>"

""" AUTO-FOLDING
"za to toggle  http://vimcasts.org/episodes/writing-a-custom-fold-expression/
" defines a foldlevel for each line of code
function! VimFolds(lnum)
  let s:thisline = getline(a:lnum)
  if match(s:thisline, '^"" ') >= 0
    return '>2'
  endif
  if match(s:thisline, '^""" ') >= 0
    return '>3'
  endif
  let s:two_following_lines = 0
  if line(a:lnum) + 2 <= line('$')
    let s:line_1_after = getline(a:lnum+1)
    let s:line_2_after = getline(a:lnum+2)
    let s:two_following_lines = 1
  endif
  if !s:two_following_lines
      return '='
    endif
  else
    if (match(s:thisline, '^"""""') >= 0) &&
       \ (match(s:line_1_after, '^"  ') >= 0) &&
       \ (match(s:line_2_after, '^""""') >= 0)
      return '>1'
    else
      return '='
    endif
  endif
endfunction
" defines a foldtext
function! VimFoldText()
  " handle special case of normal comment first
  let s:info = '('.string(v:foldend-v:foldstart).' l)'
  if v:foldlevel == 1
    let s:line = ' ◇ '.getline(v:foldstart+1)[3:-2]
  elseif v:foldlevel == 2
    let s:line = '   ●  '.getline(v:foldstart)[3:]
  elseif v:foldlevel == 3
    let s:line = '     ▪ '.getline(v:foldstart)[4:]
  endif
  if strwidth(s:line) > 80 - len(s:info) - 3
    return s:line[:79-len(s:info)-3+len(s:line)-strwidth(s:line)].'...'.s:info
  else
    return s:line.repeat(' ', 80 - strwidth(s:line) - len(s:info)).s:info
  endif
endfunction
" set foldsettings automatically for vim files
augroup fold_vimrc
  autocmd!
  autocmd FileType vim 
                   \ setlocal foldmethod=expr |
                   \ setlocal foldexpr=VimFolds(v:lnum) |
                   \ setlocal foldtext=VimFoldText() |
     "              \ set foldcolumn=2 foldminlines=2
augroup END
" Toggle folds open&closed by pressing space twice
nnoremap <silent> <leader><Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <leader><space> zf



"" PLUGINS&CONFIGS
" Plugins :PlugInstall, :PlugUninstall ; https://github.com/junegunn/vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'dense-analysis/ale'
  Plug 'scrooloose/syntastic'
  Plug 'sheerun/vim-polyglot'
  
  Plug 'honza/vim-snippets'
  Plug 'sirver/ultisnips'
  
  Plug 'rip-rip/clang_complete'
  Plug 'octol/vim-cpp-enhanced-highlight'

  Plug 'tpope/vim-fugitive'
  Plug 'plasticboy/vim-markdown'

  Plug 'tpope/vim-vinegar'
  Plug 'godlygeek/tabular'
  Plug 'yggdroot/indentline'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim' "Fuzzy find plugin
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'majutsushi/tagbar'
  Plug 'tomasr/molokai'
  Plug 'vim-airline/vim-airline'

  Plug '907th/vim-auto-save' "auto saves files as you edit
  Plug 'jdhao/better-escape.vim' "remaps esc key to jj
call plug#end()

""" CONFIGS
" Plugin Shortcuts
map <Leader>f :NERDTreeToggle<CR>
nnoremap <C-f> :Files!<CR>
nnoremap <Leader>l :Tabularize /
let g:better_escape_shortcut = 'jj'
let g:better_escape_interval = 250

" General Shortcuts
  nnoremap S :%s//g<Left><Left>
  nmap <Leader>r :w<CR>:so %<CR>
  map <Leader>e $

" lang-servers/completion/syntax
"
"
let g:polyglot_disabled = ['sensible']
let g:polyglot_disabled = ['autoindent']

" :CocInstall extentionname1 extentionname2 ...;  :CocConfig;  

" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_autoimport = 1
let g:ale_disable_lsp = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
" Show 5 lines of errors (default: 10)
let g:ale_list_window_size = 5
let g:ale_floating_window_border = repeat([''], 6)

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" UltiSnipsEdit to split window.
let g:UltiSnipsEditSplit="vertical"

" c-n/p to select
 " path to directory where library can be found
let g:clang_library_path='/usr/lib/llvm-3.8/lib'
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_no_function_highlight = 1


"git/markdown
" Markdown Edits
  let g:vim_markdown_autowrite = 1
  let g:vim_markdown_no_extensions_in_markdown = 1
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_override_foldtext = 0
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_new_list_item_indent = 0

" Markdown auto format tables
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" transparent bg
autocmd vimenter * hi Normal guibg=NONE ctermbg=NONE
"
"Utilities
let g:indentLine_setColors = 0
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2

let $FZF_DEFAULT_COMMAND = 'fdfind --type f --hidden --follow --exclude .git --ignore-file ~/.ignore'


colorscheme molokai

let g:auto_save = 1
let g:auto_save_events = ["InsertLeave", "TextChanged"]

nmap <F8> :TagbarToggle<CR>
let g:molokai_original = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
